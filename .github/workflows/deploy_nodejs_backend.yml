
name: Deploy Node Backend

on:
  workflow_call:
    inputs:
      workdir:
        description: "The directory of the lambda function"
        required: false
        default: './'
        type: string
      function-name:
        description: "Lambda function name"
        required: false
        type: string
      scan:
        description: "ECR Scan"
        required: false
        default: true
        type: boolean
      aws-region:
        description: "The AWS region"
        default: us-east-1
        required: false
        type: string
      aws-cmk:
        description: "The AWS cmk to encrypt variables"
        required: false
        type: string
      encrypt-env-vars:
        description: "Enables enviroment variables encryption"
        default: false
        required: false
        type: boolean
      version:
        description: "Application new version"
        required: false
        default: $(node -p "require('./package.json').version")$(node -p "require('./package.json').version")
        type: string
      files-to-compress:
        description: "Files to compress"
        required: false
        type: string
      function-handler:
        description: "AWS handler for the lambda function"
        required: false
        type: string
      function-memory-size:
        description: "The memory RAM will be assigned to the lambda function"
        required: false
        type: string
      function-runtime:
        description: "The Lambda function runtime"
        required: false
        type: string
      path-to-env-vars:
        description: "The JSON file which contains lambda function env vars"
        required: false
        type: string
      is-lambda-edge:
        description: "Whether to deploy as Lambda@Edge"
        default: false
        required: false
        type: boolean
      cloudfront-distributions:
        description: "The distributions associated to the Lambda@Edge"
        required: false
        type: string
      create-alias:
        description: "Create Alias for each version in function"
        default: false
        required: false
        type: boolean
      description-for-version:
        description: "Description for each new version"
        required: false
        type: string
      load-secrets-environment:
        description: "Parameter for upload secrets in environmental variables"
        required: false
        default: true
        type: boolean
      path-environments-variables: 
        description: "Path of the three environment variables files"
        required: false
        type: string
      environment: 
        description: "Environment deploy"
        required: true
        type: string
      enable-execution-code-deploy:
        description: "Execute CodeDeploy"
        required: false
        type: string
      application-name:
        description: "App name CodeDeploy"
        required: false
        type: string
      deployment-group-name:
        description: "Deployment group name CodeDeploy"
        required: false
        type: string
      appspec-path:
        description: "Path for app specification CodeDeploy"
        required: false
        type: string
      qa-black-box-testing:
        description: "Execute black box testing"
        required: false
        default: false
        type: boolean
      get-oas:
        description: "GET OAS from the IAC"
        required: false
        type: boolean
        default: false
      oas-name:
        description: "Name of the OAS to get"
        required: false
        type: string
      oas-iac:
        description: "Repo name for retrieve the oas"
        required: false
        default: 'bbog-dig-dt-aws-tvs-base-iac'
        type: string
      branch-oas-iac:
        description: "Repo branch for retrieve the oas"
        default: 'qa'
        required: false
        type: string
      service-type:
        description: "Type of deployment"
        required: true
        type: string
      node-version:
        default: '18.x'
        description: "Version for node"
        required: false
        type: string
      task-definition-path:
        description: "Relative Path of task definition json"
        required: false
        type: string
      stop-tasks:
        description: "True or False for stop tasks"
        default: "true"
        required: false
        type: string
      desired-task-count:
        description: "Relative Path of the dockerfile"
        required: false
        default: '1'
        type: string
      cluster:
        description: "The name of the ECS Cluster"
        required: false
        type: string
      load-balancer-name:
        description: "The name of the Load Balancer"
        required: false
        type: string
      target-group-name:
        description: "The name of the Target Group"
        required: false
        type: string
      container-name:
        description: "The name of the conntainer definition"
        type: string
      check-health:
        description: "Whether to check the health status of the ECS service through the specified target group"
        required: false
        default: true
        type: boolean
      deploy-new-task:
        description: "This variable is 'false' when using codedeploy"
        required: false
        default: true
        type: boolean
      image:
        description: "Docker image name"
        required: false
        type: string
      dockerfile-path:
        description: "Relative Path of the dockerfile"
        required: false
        type: string
      service:
        description: "ECS service name"
        required: false
        type: string
      build-command:
        description: "Command for build"
        required: false
        default: "npm ci"
        type: string
      prepare-files:
        description: "Files to prepare for upload"
        default: 'cp lambda/index.js index.js'
        required: false
        type: string
      continuous-deployment:
        default: false
        required: false
        type: boolean
      put-items-dynamo:
        default: false
        required: false
        type: boolean
    secrets:
      DIG_READER_GITHUB_ACCESS_TOKEN:
        required: true
      ARTIFACTORY_READER_USER:
        required: true
      ARTIFACTORY_READER_API_KEY:
        required: true
      AWS_ACCOUNT_ID:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_ROLE_DEPLOY_BACKEND:
        required: true
      SONAR_CLOUD_TOKEN:
        required: true
      SONAR_CLOUD_ORG:
        required: true

jobs:

  put-items-dynamo:
    runs-on: ubuntu-latest
    if: ${{ inputs.put-items-dynamo }}
    steps:
      - uses: actions/checkout@v2
      - name: Use Python3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Dependencies
        run: |
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          . venv/bin/activate
          source venv/bin/activate
          python3 -m pip install boto3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: run dynamo script on table ${ENV}
        run: |
          source venv/bin/activate
          python3 dyn_items/putItems.py


  environment-files-changed:
    runs-on: ubuntu-latest
    outputs:
      only-update-variables: ${{steps.Files-Changed.outputs.only-update-variables}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Checkout bancodebogota/bdb-dig-do-pipelines-action-files-changed-analyze
        uses: actions/checkout@v3
        with:
          repository: bancodebogota/bdb-dig-do-pipelines-action-files-changed-analyze
          ref: ''
          token: ${{ secrets.DIG_READER_GITHUB_ACCESS_TOKEN }}
          persist-credentials: false
          path: ./.github/actions/bdb-dig-do-pipelines-action-files-changed-analyze
      - name: Files Changed
        id: Files-Changed
        uses: ./.github/actions/bdb-dig-do-pipelines-action-files-changed-analyze
        with:
          path-environments-variables: ${{ inputs.path-environments-variables }}

  check-sonar:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - name: Checkout Check Files Workflows
        uses: actions/checkout@v3
        with:
          repository: bancodebogota/bdb-dig-do-action-check-files-workflows
          ref: 'v4'
          token: ${{ secrets.DIG_READER_GITHUB_ACCESS_TOKEN }}
          persist-credentials: false
          path: ./.github/actions/bdb-dig-do-action-check-files-workflows
      - name: Use Node.js
        uses: actions/setup-node@v3.5.0
        with:
          node-version: ${{ inputs.node-version }}
      - name: Authenticate Jfrog
        env:
          ARTIFACTORY_READER_USER: ${{ secrets.ARTIFACTORY_READER_USER }}
          ARTIFACTORY_READER_API_KEY: ${{ secrets.ARTIFACTORY_READER_API_KEY }}
        run: |
          set -eux
          curl -u "${ARTIFACTORY_READER_USER}:${ARTIFACTORY_READER_API_KEY}" 'https://bbogdigital.jfrog.io/bbogdigital/api/npm/auth' >> ~/.npmrc
          sed -i 's#_auth#//bbogdigital.jfrog.io/bbogdigital/api/npm/npm-bbta/:_auth#g' ~/.npmrc
          sed -i 's#always-auth#//bbogdigital.jfrog.io/bbogdigital/api/npm/npm-bbta/:always-auth#g' ~/.npmrc
          sed -i 's#email#//bbogdigital.jfrog.io/bbogdigital/api/npm/npm-bbta/:email#g' ~/.npmrc
      - name: GET_OAS
        if: ${{ fromJSON(inputs.get-oas) }}
        env: 
          OAS_IAC: ${{ inputs.oas-iac }}
          OAS_NAME: ${{ inputs.oas-name }}
          DIG_READER_GITHUB_ACCESS_TOKEN:  ${{ secrets.DIG_READER_GITHUB_ACCESS_TOKEN }}
          GITHUB_REPO_BRANCH_OAS: ${{ inputs.branch-oas-iac }}
        shell: bash
        run: |
          curl -H "Authorization: token $DIG_READER_GITHUB_ACCESS_TOKEN" -o static/"$OAS_NAME"_OAS.json https://raw.githubusercontent.com/bancodebogota/"$OAS_IAC"/"$GITHUB_REPO_BRANCH_OAS"/components/backend/definitions/apis/"$OAS_NAME"_OAS.json || exit 1
          cat static/"$OAS_NAME"_OAS.json
      - name: Install dev dependencies
        run: |
          npm i
      - name: Set branch name for sonar
        shell: bash
        id: long-lived-branch
        run: |
          BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)
          CURRENT_BRANCH="$BRANCH_NAME"
          if [ "$CURRENT_BRANCH" != "master" ] && [ "$CURRENT_BRANCH" != "release-staging" ] && [ "$CURRENT_BRANCH" != "release-dev" ]
          then
            CURRENT_BRANCH="release-dev"
          fi
          echo "##[set-output name=branch;]$(echo ${CURRENT_BRANCH})"
          echo "Sonar Branch report => " ${CURRENT_BRANCH}
      - name: create coverage file and sonarProperties
        shell: bash
        run: | 
          npm run coverage
          npm run coverage:report
          echo sonar.projectName:${PROJECT_NAME} >> sonar-project.properties
          echo sonar.projectKey:${PROJECT_KEY} >> sonar-project.properties
          echo sonar.organization:${SONAR_ORGANIZATION} >> sonar-project.properties
          echo sonar.branch.name:${BRANCH_NAME} >> sonar-project.properties
          echo sonar.javascript.lcov.reportPaths=${SONAR_COVERAGE_FILE} >> sonar-project.properties
          echo sonar.typescript.lcov.reportPaths=${SONAR_COVERAGE_FILE} >> sonar-project.properties
          echo sonar.login: ${SONAR_CLOUD_TOKEN} >> sonar-project.properties
          echo sonar.language:${SONAR_LANGUAGE} >> sonar-project.properties
          echo sonar.sources:${SONAR_SOURCE} >> sonar-project.properties
          echo sonar.qualitygate.wait=true >> sonar-project.properties
          echo sonar.exclusions:${SONAR_EXCLUDES} >> ./sonar-project.properties
          cat sonar-project.properties
          cat coverage/lcov.info
          pwd
        env:
          PROJECT_NAME: ${{ github.event.repository.name }}
          PROJECT_KEY: ${{ github.event.repository.name }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_CLOUD_ORG }}
          BRANCH_NAME: ${{ steps.long-lived-branch.outputs.branch }}
          SONAR_COVERAGE_FILE: coverage/lcov.info
          SONAR_LANGUAGE: javascript
          SONAR_SOURCE: src
          SONAR_CLOUD_TOKEN: ${{ secrets.SONAR_CLOUD_TOKEN }}
          SONAR_EXCLUDES: src/services/base/Mocks.ts, coverage.xml

      - name: SonarCloud Scan and Report
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{secrets.DIG_READER_GITHUB_ACCESS_TOKEN}}
          SONAR_TOKEN: ${{ secrets.SONAR_CLOUD_TOKEN }}
  
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    environment: ${{ inputs.environment }}
    needs:
      - environment-files-changed
      - check-sonar
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - name: Checkout Check Files Workflows
        uses: actions/checkout@v3
        with:
          repository: bancodebogota/bdb-dig-do-action-check-files-workflows
          ref: 'v4'
          token: ${{ secrets.DIG_READER_GITHUB_ACCESS_TOKEN }}
          persist-credentials: false
          path: ./.github/actions/bdb-dig-do-action-check-files-workflows
      - name: Use Node.js
        uses: actions/setup-node@v3.5.0
        with:
          node-version: ${{ inputs.node-version }}
      - name: Authenticate Jfrog
        env:
          ARTIFACTORY_READER_USER: ${{ secrets.ARTIFACTORY_READER_USER }}
          ARTIFACTORY_READER_API_KEY: ${{ secrets.ARTIFACTORY_READER_API_KEY }}
        run: |
          set -eux
          curl -u "${ARTIFACTORY_READER_USER}:${ARTIFACTORY_READER_API_KEY}" 'https://bbogdigital.jfrog.io/bbogdigital/api/npm/auth' >> ~/.npmrc
          sed -i 's#_auth#//bbogdigital.jfrog.io/bbogdigital/api/npm/npm-bbta/:_auth#g' ~/.npmrc
          sed -i 's#always-auth#//bbogdigital.jfrog.io/bbogdigital/api/npm/npm-bbta/:always-auth#g' ~/.npmrc
          sed -i 's#email#//bbogdigital.jfrog.io/bbogdigital/api/npm/npm-bbta/:email#g' ~/.npmrc
      - name: GET_OAS
        if: ${{ fromJSON(inputs.get-oas) }}
        env: 
          OAS_IAC: ${{ inputs.oas-iac }}
          OAS_NAME: ${{ inputs.oas-name }}
          DIG_READER_GITHUB_ACCESS_TOKEN:  ${{ secrets.DIG_READER_GITHUB_ACCESS_TOKEN }}
          GITHUB_REPO_BRANCH_OAS: ${{ inputs.branch-oas-iac }}
        shell: bash
        run: |
          curl -H "Authorization: token $DIG_READER_GITHUB_ACCESS_TOKEN" -o static/"$OAS_NAME"_OAS.json https://raw.githubusercontent.com/bancodebogota/"$OAS_IAC"/"$GITHUB_REPO_BRANCH_OAS"/components/backend/definitions/apis/"$OAS_NAME"_OAS.json || exit 1
          cat static/"$OAS_NAME"_OAS.json
      - name: Install Dependencies
        env:
          ARTIFACTORY_READER_USER: ${{ secrets.ARTIFACTORY_READER_USER }}
          ARTIFACTORY_READER_API_KEY: ${{ secrets.ARTIFACTORY_READER_API_KEY }}
        run: |
          npm run install-dependencies
      - name: BUILD
        run: |
          ${{ inputs.build-command }}
      - name: Checking ECS
        if: ${{ inputs.service-type == 'ecs' }}
        uses: actions/checkout@v3
        with:
          repository: bancodebogota/bdb-dig-do-pipelines-action-ecs-IaC
          ref: 'v1'
          token: ${{ secrets.DIG_READER_GITHUB_ACCESS_TOKEN }}
          persist-credentials: false
          path: ./.github/actions/bdb-dig-do-pipelines-action-ecs-IaC
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ inputs.task-definition-path }}
          container-name: ${{ inputs.container-name }}
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.image }}:${{ inputs.version }}
      - name: Deploy ECS
        if: ${{ inputs.service-type == 'ecs' }}
        uses: ./.github/actions/bdb-dig-do-pipelines-action-ecs-IaC
        with:
          workdir: ${{ inputs.workdir }}
          image: ${{ inputs.image }}
          version: ${{ inputs.version }}
          dockerfile-path: ${{ inputs.dockerfile-path }}
          aws-account-id: ${{ secrets.AWS_ACCOUNT_ID }}
          aws-region: ${{ inputs.aws-region }}
          service: ${{ inputs.service }}
          scan: ${{ inputs.scan }}
          task-definition-path: ${{ steps.task-def.outputs.task-definition }}
          stop-tasks: ${{ inputs.stop-tasks }}
          desired-task-count: ${{ inputs.desired-task-count }}
          cluster: ${{ inputs.cluster }}
          load-balancer-name: ${{ inputs.load-balancer-name }}
          target-group-name: ${{ inputs.target-group-name }}
          check-health: ${{ inputs.check-health }}
          only-update-variables: ${{ fromJSON(needs.environment-files-changed.outputs.only-update-variables) }}
          deploy-new-task: ${{ inputs.deploy-new-task }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Checking LAMBDA
        if: ${{ inputs.service-type == 'lambda' }}
        uses: actions/checkout@v3
        with:
          repository: bancodebogota/bdb-dig-do-pipelines-action-lambdas-IaC
          ref: "v3"
          token: ${{ secrets.DIG_READER_GITHUB_ACCESS_TOKEN }}
          persist-credentials: false
          path: ./.github/actions/bdb-dig-do-pipelines-action-lambdas-IaC
      - name: Prepare files
        if: ${{ inputs.service-type == 'lambda' }}
        run: ${{ inputs.prepare-files }}
      - name: Deploy Lambda
        if: ${{ inputs.service-type == 'lambda' }}
        uses: ./.github/actions/bdb-dig-do-pipelines-action-lambdas-IaC
        with:
          workdir: ${{ inputs.workdir }}
          function-name: ${{ inputs.function-name }}
          aws-region: ${{ inputs.aws-region }}
          aws-cmk: ${{ inputs.aws-cmk }}
          aws-account-id: ${{ secrets.AWS_ACCOUNT_ID }}
          encrypt-env-vars: ${{ inputs.encrypt-env-vars }}
          version: ${{ inputs.version }}
          files-to-compress: ${{ inputs.files-to-compress }}
          function-handler: ${{ inputs.function-handler }}
          function-memory-size: ${{ inputs.function-memory-size }}
          function-runtime: ${{ inputs.function-runtime }}
          path-to-env-vars: ${{ inputs.path-to-env-vars }}
          is-lambda-edge: ${{ inputs.is-lambda-edge }}
          cloudfront-distributions: ${{ inputs.cloudfront-distributions }}
          create-alias: ${{ inputs.create-alias }}
          description-for-version: ${{ inputs.description-for-version }}
          only-update-variables: ${{ steps.Files-Changed.outputs.only-update-variables }}
          load-secrets-environment: ${{ inputs.load-secrets-environment }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          continuous-deployment: ${{ inputs.continuous-deployment }}